# this section is used to configure the
# complete server, including both options
# for the rest api and those related to
# the operation of the program itself.
[server]
# the user to change to once the program starts.
user = 'root'
# the port to host the rest server on.
port = 1337
# secret used to validate that a key was actually issued by
key_validation_secret = '+s4W$#6ES7dxXD57S$%*Se58'
# length of key data
key_random_bytes = 32
# length of checksum portion of key
key_checksum_bytes = 8
# rate limit for keys with no corresponding rate limit
[server.auth_default_rl]
limit = 5
burst = 5
refill = 5000000000
# rate limit for attempting to authenticate with a key (valid limit > 0)
[server.auth_attempt_rl]
limit = 3
burst = 3
refill = 5000000000
# rate limit for attempting to access a file anonymously
[server.ip_anonymous_rl]
limit = 1
burst = 1
refill = 5000000000

# this section is used to configure options
# related to managing the files on disk.
[file_manager]
# the path to the root directory which the
# file server will start at. path names in
# queries will not include this folder.
path = './files'
# the maximum number of sub-directories
# allowed to be created via the api. existing
# directories above this depth can still be
# modified by creating files, but directories
# may not be created within it.
max_depth = 32

# this section is used to configure the
# database used to store file permissions,
# user authentication, and other data.
[database]
# the path for the database folder.
# it will be created if it does not exist.
connection_string = '.database?cache=shared&mode=rwc&_journal_mode=WAL'
# the version number for the database.
# do not modify this value unless updating
# versions or using an existing database.
version = 1
# the database solution
# valid values: {'sqlite'}
type = 'sqlite'

# this section manages the maximum size
# of the program's caches and the intervals
# at which data is purged, when necessary.
[cache]
# the number of user api keys to store.
# approx size per entry: 192B + key comment
keys = 1_000
# the number of permission ids to store.
# approx size per entry:
# - >32B with permissions_hash='none'   (8B int + 1B per path char including /)
# -  40B with permissions_hash='sha256' (8B int + 32B hash)
# -  72B with permissions_hash='sha512' (8B int + 64B hash)
permission_ids = 100_000
# the hash function used when storing file
# paths for the permissions cache. there is
# an extremely low, but non-zero, chance that
# using a hash function will lead to collisions,
# which may lead to insecure direct object
# reference by otherwise unauthorized keys.
permission_id_hash = 'sha256'

[logging]
# the minimum level required to output to stdout.
# order: 'debug' 'info' 'notice' 'warning' 'error' 'critical'
stdout_level = 'info'
# the logging format when outputting to log files.
# see documentation: https://github.com/op/go-logging
stdout_format = '%{color}%{time:15:04:05.000} %{id:03x} %{longfile} %{level:-8s} » %{color:reset} %{message}'
# the path to the file that logs are output to.
# use an empty string to disable file logging.
# template: {time} {pid}
file = './logs/{time}.txt'
# the minimum level required to output to the log.
# order: 'debug' 'info' 'notice' 'warning' 'error' 'critical'
file_level = 'info'
# the logging format when outputting to log files.
# see documentation: https://github.com/op/go-logging
file_format = '%{time:15:04:05.000} %{id:03x} %{longfile} %{level:.04} » %{message}'
# the max file size is the maximum size allocated
# for logging. when exceeded, newer entries will
# be kept in favor of elements near the beginning.
# examples: '0' (infinite), '100 MB', '50G', '1GiB'
max_file_size = '1G'
